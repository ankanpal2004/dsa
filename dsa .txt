assiment1: wap to print the given number reverse oder
#include<stdio.h>
int main(){
    int i,arr[5];
    printf("Enter the array element:");
    for(i=0;i<5;i++){
        scanf("%d",&arr[i]);
    }
    printf("\n array in reverse order:");
    for(i=4;i>=0;i--){
        printf("%d",arr[i]);
    }
    return 0;
}

assiment:2 
 // Sparse Matrix to store non-zero elements
#include<stdio.h>

void main(){
    int m, n;
    printf("Enter the dimensions of the 2-D array: ");
    scanf("%d %d", &m, &n);

    int arr[m][n];

    printf("Enter the array: \n");
    int i, j;
    for(i = 0; i < m; i++){
        for(j = 0; j < n; j++){
            scanf("%d", &arr[i][j]);
        }
    }

    int count = 0;
    for(i = 0; i < m; i++){
        for(j = 0; j < n; j++){
            if(arr[i][j] != 0){
                count++;
            }
        }
    }

    int sp[count + 1][3];
    sp[0][0] = m; // stores the no. of rows
    sp[0][1] = n; // stores the no. of cols
    sp[0][2] = count; // stores the no. of non-zero elements

    int cur_row = 1;
    for(i = 0; i < m; i++){
        for(j = 0; j < n; j++){
            if(arr[i][j] != 0){
                sp[cur_row][0] = i;
                sp[cur_row][1] = j;
                sp[cur_row][2] = arr[i][j];
                cur_row++;
            }
        }
    }

    printf("\nThe Sparse Matrix is: \n");
    for(i = 0; i < cur_row; i++){
        for(j = 0; j < 3; j++){
            printf("%d ", sp[i][j]);
        }
        printf("\n");
    }
    getchar();
    getchar();
}

assiment:3
// Implementation of stack using array in C
#include<stdio.h>
#include<stdlib.h>

struct Stack{
    int top, size, arr[100];
} Stack_default = {-1, 100, {}};

typedef struct Stack Stack;

void push(Stack*, int item);
int pop(Stack*);
void display(Stack*);

void main(){
    Stack stack1 = Stack_default;
    int choice;
    while(1){
        printf("1. Push\n2. Pop\n3. Display\n4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        int item;
        switch(choice){
            case 1:
                printf("Enter an item to Push: ");
                scanf("%d", &item);
                push(&stack1, item);
                break;
            case 2:
                item = pop(&stack1);
                printf("Deleted item: %d\n", item);
                break;
            case 3:
                display(&stack1);
                printf("\n");
                break;
            case 4:
                printf("Exit");
                exit(0);
                break;
            default:
                printf("Invalid input\n");
        }
    }
    getchar();
}

void push(Stack *stack, int item){
    if(stack->top == stack->size - 1){
        printf("Overflow");
        return;
    }
    stack->top++;
    stack->arr[stack->top] = item;
}

int pop(Stack *stack){
    if(stack->top == -1){
        printf("Underflow");
        return 0;
    }
    int item = stack->top;
    stack->top--;
    return item;
}

void display(Stack *stack)
{
    int i;
    printf("Items in Stack are: ");
    for(i = 0; i <= stack->top; i++){
        printf("%d ", stack->arr[i]);
    }
}
assinment:4 infix expression to posfix expression using stack 
#include <stdio.h>
#include <string.h>

char stack[100];
int top = -1;

void push(char x) 
{
    top=top+1;
	stack[top] = x;
}

char pop() 
{
    if (top == -1)
        return -1;
    else
        return stack[top--];
}

int priority(char x) {
    if (x == '(')
        return 1;
    if (x == '+' || x == '-')
        return 2;
    if (x == '*' || x == '/')
        return 3;
    if (x == '^')
        return 4;
    return 1;
}

int main() {
    char exp[100];
    char x;int i,len;  // No need for pointer e

    printf("Enter the expression : ");
    gets(exp);
    len = strlen(exp);
    printf("\n");

    for (i = 0; i<len; i++) 
	{
		
        if (exp[i] == ' ' || exp[i] == '\t') {
            continue;
        }
        if (isalnum(exp[i]))
            printf("%c ", exp[i]);
        else if (exp[i] == '(')
            push(exp[i]);
        else if (exp[i] == ')') {
            while ((x = pop()) != '(')
                printf("%c ", x);
        } else {
            while (priority(stack[top]) >= priority(exp[i]))
                printf("%c ", pop());
            push(exp[i]);
        }
    }

    while (top != -1) {
        printf("%c ", pop());
    }

 return 0;
}

assi:5
// Implementation of queue using array in C
#include<stdio.h>
#include<stdlib.h>

struct Queue{
    int first, last, size, arr[100];
} Queue_default = {-1, -1, 100, {}};

typedef struct Queue Queue;

void enqueue(Queue*, int item);
int dequeue(Queue*);
void display(Queue*);

void main(){
    Queue q1 = Queue_default;
    int choice;
    while(1){
        printf("1. Enqueue\n2. Dequeue\n3. Display\n4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        int item;
        switch(choice){
            case 1:
                printf("Enter an item to enqueue: ");
                scanf("%d", &item);
                enqueue(&q1, item);
                break;
            case 2:
                item = dequeue(&q1);
                printf("Deleted item: %d\n", item);
                break;
            case 3:
                display(&q1);
                printf("\n");
                break;
            case 4:
                printf("Exit");
                exit(0);
                break;
            default:
                printf("Invalid input\n");
        }
    }
    getchar();
}

void enqueue(Queue *q, int item){
    if(q->last == q->size - 1){
        printf("Overflow\n");
        return;
    }
    if(q->first == -1 && q->last == -1){
        q->first++;
    }
    q->last++;
    q->arr[q->last] = item;
}

int dequeue(Queue *q){
    if((q->first == -1 && q->last == -1) || (q->first > q->last)){
        printf("Underflow\n");
        return 0;
    }
    int item = q->arr[q->first];
    q->first++;
    return item;
}

void display(Queue *q){
    int i;
    printf("Items in Queue are: ");
    for(i = q->first; i <= q->last; i++){
        printf("%d ", q->arr[i]);
    }
}

assi:6
// Implementation of circular queue using array in C
#include<stdio.h>
#include<stdlib.h>

struct CircularQueue{
    int first, last, size, arr[100];
} CircularQueue_default = {-1, -1, 100, {}};

typedef struct CircularQueue CircularQueue;

void enqueue(CircularQueue*, int item);
int dequeue(CircularQueue*);
void display(CircularQueue*);

void main(){
    CircularQueue cq1 = CircularQueue_default;
    int choice;
    while(1){
        printf("1. Enqueue\n2. Dequeue\n3. Display\n4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        int item;
        switch(choice){
            case 1:
                printf("Enter an item to enqueue: ");
                scanf("%d", &item);
                enqueue(&cq1, item);
                break;
            case 2:
                item = dequeue(&cq1);
                printf("Deleted item: %d\n", item);
                break;
            case 3:
                display(&cq1);
                printf("\n");
                break;
            case 4:
                printf("Exit");
                exit(0);
                break;
            default:
                printf("Invalid input\n");
        }
    }
    getchar();
}

void enqueue(CircularQueue *cq, int item){
    // Overflow condition
    if((cq->last + 1) % cq->size == cq->first){
    	printf("Overflow\n");
        return;
    }

    // Empty Queue condition
    if(cq->last == -1 && cq->first == -1){
        cq->first = (cq->first + 1) % cq->size;
    }

    // Other condition
    cq->last = (cq->last + 1) % cq->size;
    cq->arr[cq->last] = item;
}

int dequeue(CircularQueue *cq){
    // Underflow condition
    if(cq->first == -1){
    	printf("Underflow\n");
        return -1;
    }
	
	int item = cq->arr[cq->first];
	
    // If first and last are at same location
    if(cq->first == cq->last){
        cq->first = -1;
        cq->last = -1;
    }else{
    	cq->first = (cq->first + 1) % cq->size;	
	}
    
    return item;
}

void display(CircularQueue *cq){
	// Overflow condition
	if(cq->first == -1){
		printf("Empty Queue");
		return;
	}
	printf("front: %d rear: %d\n", cq->first, cq->last);
    int i;
    for(i = cq->first; i != cq->last; i = (i + 1) % cq->size){
        printf("%d ", cq->arr[i]);
    }
    printf("%d ", cq->arr[cq->last]);
}

assi 7: create linklist
# include <stdio.h>
# include <stdlib.h>
struct slinklist
{
	int data;
	struct slinklist *next;
};
typedef struct slinklist node;
node *start = NULL;
//create one node
node* getnode()
{
	node* newnode;
	newnode = (node *) malloc(sizeof(node));
	printf("\n Enter data: "); 
	scanf("%d",&newnode -> data);
	newnode -> next = NULL;
	return newnode;
}

void traverse()
		{
			node *temp;
			temp = start;
			printf("\n The contents of List (Left to Right): \n");
			if(start == NULL)
				{
					printf("\n Empty List");
					return;
				}
			else
			{
				while(temp != NULL)
				{
					printf("%d-->", temp -> data);
					temp = temp -> next;
				}
			}
			printf("NULL");
		}

void createlist(int n)
{
	int i;
	node *newnode;
	node *temp;
	for(i = 0; i < n; i++)
		{
		newnode = getnode();
		if(start == NULL)
		{
			start = newnode;
		}
		else
		{
			temp = start;
			while(temp -> next != NULL)
			temp = temp -> next;
			temp -> next = newnode;
		}
		}
}
int main()
{
    int ch, n;
    node *Head;
    if(start == NULL)
		{
			printf("\n Number of nodes you want to create: ");
			scanf("%d", &n);
			createlist(n);
			printf("\n List created..");
}
	else
			printf("\n List is already created..");
	traverse();
}

assin:8 insert a node at the intermidiate in a single linked list
# include <stdio.h>
//# include <conio.h>
# include <stdlib.h>
struct slinklist
{
int data;
struct slinklist *next;
};
typedef struct slinklist node;
node *start = NULL;
//create one node
node* getnode()
{
	node* newnode;
	newnode = (node *) malloc(sizeof(node));
	printf("\n Enter data: "); 
	scanf("%d",&newnode -> data);
	newnode -> next = NULL;
	return newnode;
}

void traverse()
		{
			node *temp;
			temp = start;
			printf("\n The contents of List (Left to Right): \n");
			if(start == NULL)
				{
					printf("\n Empty List");
					return;
				}
			else
			{
				while(temp != NULL)
				{
					printf("%d-->", temp -> data);
					temp = temp -> next;
				}
			}
			printf("NULL");
		}

void createlist(int n)
{
	int i;
	node *newnode;
	node *temp;
	for(i = 0; i < n; i++)
		{
		newnode = getnode();
		if(start == NULL)
		{
			start = newnode;
		}
		else
		{
			temp = start;
			while(temp -> next != NULL)
			temp = temp -> next;
			temp -> next = newnode;
		}
		}
}

void insert_at_inter()
{
	node *newnode, *temp, *prev;
	int pos, nodectr, ctr = 1;
	newnode = getnode();
	printf("\n Enter the position: ");
	scanf("%d", &pos);
	nodectr = countnode(start);
	if(pos > 1 && pos <= nodectr)
	{
		temp = prev = start;
		while(ctr < pos)
		{
			prev = temp;
			temp = temp -> next;
			ctr++;
		}
		prev -> next = newnode;
		newnode -> next = temp;
	}
	else
	{
	printf("position %d is not a middle position", pos);
	}
}

int countnode(node *ptr)
{
	int count=0;
	while(ptr != NULL)
	{
		count++;
		ptr = ptr -> next;
	}
	return (count);
}


int main()
{
    int ch, n;
    node *Head;
    if(start == NULL)
		{
			printf("\n Number of nodes you want to create: ");
			scanf("%d", &n);
			createlist(n);
			printf("\n List created..\n");
			insert_at_inter();
			traverse();
}
	else
			printf("\n List is already created..");
	traverse();
}

2>Inser a node at the end in a single linklist
# include <stdio.h>
//# include <conio.h>
# include <stdlib.h>
struct slinklist
{
int data;
struct slinklist *next;
};
typedef struct slinklist node;
node *start = NULL;
//create one node
node* getnode()
{
	node* newnode;
	newnode = (node *) malloc(sizeof(node));
	printf("\n Enter data: "); 
	scanf("%d",&newnode -> data);
	newnode -> next = NULL;
	return newnode;
}

void traverse()
		{
			node *temp;
			temp = start;
			printf("\n The contents of List (Left to Right): \n");
			if(start == NULL)
				{
					printf("\n Empty List");
					return;
				}
			else
			{
				while(temp != NULL)
				{
					printf("%d-->", temp -> data);
					temp = temp -> next;
				}
			}
			printf("NULL");
		}

void createlist(int n)
{
	int i;
	node *newnode;
	node *temp;
	for(i = 0; i < n; i++)
		{
		newnode = getnode();
		if(start == NULL)
		{
			start = newnode;
		}
		else
		{
			temp = start;
			while(temp -> next != NULL)
			temp = temp -> next;
			temp -> next = newnode;
		}
		}
}

void insert_at_end()
{
	node *newnode, *temp;
	printf("This is for new node at the end");
	newnode = getnode();
	if(start == NULL)
	{
		start = newnode;
	}
	else
	{
		temp = start;
		while(temp -> next != NULL)
			temp = temp -> next;
		temp -> next = newnode;
	}
}

int main()
{
    int ch, n;
    node *Head;
    if(start == NULL)
		{
			printf("\n Number of nodes you want to create: ");
			scanf("%d", &n);
			createlist(n);
			printf("\n List created..\n");
			insert_at_end();
}
	else
			printf("\n List is already created..");
	traverse();
}

3> insert a node at beging position
# include <stdio.h>
//# include <conio.h>
# include <stdlib.h>
struct slinklist
	{
	int data;
	struct slinklist *next;
	};
typedef struct slinklist node;
node *start = NULL;
//create one node
node* getnode()
{
	node* newnode;
	newnode = (node *) malloc(sizeof(node));
	printf("\n Enter data: "); 
	scanf("%d",&newnode -> data);
	newnode -> next = NULL;
	return newnode;
}

void traverse()
		{
			node *temp;
			temp = start;
			printf("\n The contents of List (Left to Right): \n");
			if(start == NULL)
				{
					printf("\n Empty List");
					return;
				}
			else
			{
				while(temp != NULL)
				{
					printf("%d-->", temp -> data);
					temp = temp -> next;
				}
			}
			printf("NULL");
		}

void createlist(int n)
{
	int i;
	node *newnode;
	node *temp;
	for(i = 0; i < n; i++)
		{
		newnode = getnode();
		if(start == NULL)
		{
			start = newnode;
		}
		else
		{
			temp = start;
			while(temp -> next != NULL)
			temp = temp -> next;
			temp -> next = newnode;
		}
		}
}

void insert_at_beg()
{
	node *newnode;
	printf("This is for Insert at begin\n");
	newnode = getnode();
	if(start == NULL)
	{
		start = newnode;
	}
	else
	{
		newnode -> next = start;
		start = newnode;
	}
}

int main()
{
    int ch, n;
    node *Head;
    if(start == NULL)
		{
			printf("\n Number of nodes you want to create: ");
			scanf("%d", &n);
			createlist(n);
			printf("\n List created..\n");
			insert_at_beg();
}
	else
			printf("\n List is already created..");
	traverse();
}

assin9: delete a node of the intermidiate in a single linklist
# include <stdio.h>
# include <stdlib.h>
struct slinklist
{
	int data;
	struct slinklist *next;
};
typedef struct slinklist node;
node *start = NULL;
//create one node
node* getnode()
{
	node* newnode;
	newnode = (node *) malloc(sizeof(node));
	printf("\n Enter data: "); 
	scanf("%d",&newnode -> data);
	newnode -> next = NULL;
	return newnode;
}

void traverse()
		{
			node *temp;
			temp = start;
			printf("\n The contents of List (Left to Right): \n");
			if(start == NULL)
				{
					printf("\n Empty List");
					return;
				}
			else
			{
				while(temp != NULL)
				{
					printf("%d-->", temp -> data);
					temp = temp -> next;
				}
			}
			printf("NULL");
		}

void createlist(int n)
{
	int i;
	node *newnode;
	node *temp;
	for(i = 0; i < n; i++)
		{
		newnode = getnode();
		if(start == NULL)
		{
			start = newnode;
		}
		else
		{
			temp = start;
			while(temp -> next != NULL)
			temp = temp -> next;
			temp -> next = newnode;
		}
		}
}

void delete_at_mid()
{
	int ctr = 1, pos, nodectr;
	node *temp, *prev;
	if(start == NULL)
	{
		printf("\n Empty List..");
		return ;
	}
	else
	{
		printf("\n Enter position of node to delete: ");
		scanf("%d", &pos);
		nodectr = countnode(start);
		if(pos > nodectr)
		{
			printf("\nThis node doesnot exist");
		}
		 
		if(pos > 1 && pos < nodectr)
		{
			temp = prev = start;
			while(ctr < pos)
			{
				prev = temp;
				temp = temp -> next;
				ctr ++;
			}
			prev -> next = temp -> next;
			free(temp);
			printf("\n Node deleted..");
		}
		else
		{
			printf("\n Invalid position..");
			//
		}
	}
}

int countnode(node *ptr)
{
	int count=0;
	while(ptr != NULL)
	{
		count++;
		ptr = ptr -> next;
	}
	return (count);
}


int main()
{
    int ch, n;
    node *Head;
    if(start == NULL)
		{
			printf("\n Number of nodes you want to create: ");
			scanf("%d", &n);
			createlist(n);
			printf("\n List created..");
			delete_at_mid();
}
	else
			printf("\n List is already created..");
	traverse();
}

2> delete a node of the begeing in a single linklist
# include <stdio.h>
# include <stdlib.h>
struct slinklist
{
	int data;
	struct slinklist *next;
};
typedef struct slinklist node;
node *start = NULL;
//create one node
node* getnode()
{
	node* newnode;
	newnode = (node *) malloc(sizeof(node));
	printf("\n Enter data: "); 
	scanf("%d",&newnode -> data);
	newnode -> next = NULL;
	return newnode;
}

void traverse()
		{
			node *temp;
			temp = start;
			printf("\n The contents of List (Left to Right): \n");
			if(start == NULL)
				{
					printf("\n Empty List");
					return;
				}
			else
			{
				while(temp != NULL)
				{
					printf("%d-->", temp -> data);
					temp = temp -> next;
				}
			}
			printf("NULL");
		}

void createlist(int n)
{
	int i;
	node *newnode;
	node *temp;
	for(i = 0; i < n; i++)
		{
		newnode = getnode();
		if(start == NULL)
		{
			start = newnode;
		}
		else
		{
			temp = start;
			while(temp -> next != NULL)
			temp = temp -> next;
			temp -> next = newnode;
		}
		}
}

void delete_at_beg()
{
	node *temp;
	if(start == NULL)
	{
		printf("\n no nodes are exist...");
		return ;
	}
	else
	{
		temp=start;
		start=temp->next;
		free(temp);
		printf("\n node delete");
		{
			printf("\nThis node doesnot exist");
		}
	}		 
}


int main()
{
    int ch, n;
    node *Head;
    if(start == NULL)
		{
			printf("\n Number of nodes you want to create: ");
			scanf("%d", &n);
			createlist(n);
			printf("\n List created..");
			delete_at_beg();
}
	else
			printf("\n List is already created..");
	traverse();
}

3> END
# include <stdio.h>
# include <stdlib.h>
struct slinklist
{
	int data;
	struct slinklist *next;
};
typedef struct slinklist node;
node *start = NULL;
//create one node
node* getnode()
{
	node* newnode;
	newnode = (node *) malloc(sizeof(node));
	printf("\n Enter data: "); 
	scanf("%d",&newnode -> data);
	newnode -> next = NULL;
	return newnode;
}

void traverse()
		{
			node *temp;
			temp = start;
			printf("\n The contents of List (Left to Right): \n");
			if(start == NULL)
				{
					printf("\n Empty List");
					return;
				}
			else
			{
				while(temp != NULL)
				{
					printf("%d-->", temp -> data);
					temp = temp -> next;
				}
			}
			printf("NULL");
		}

void createlist(int n)
{
	int i;
	node *newnode;
	node *temp;
	for(i = 0; i < n; i++)
		{
		newnode = getnode();
		if(start == NULL)
		{
			start = newnode;
		}
		else
		{
			temp = start;
			while(temp -> next != NULL)
			temp = temp -> next;
			temp -> next = newnode;
		}
		}
}

void delete_at_end()
{
	node *temp, * prev;
	if(start == NULL)
	{
		printf("\n empty list...");
		return ;
	}
	else
	{
		temp=start;
		prev=start;
		while(temp->next!=NULL)
		{
			prev=temp;
			temp=temp->next;
		}
		prev->next=NULL;
		free(temp);
		printf("\n node delete");
	}		 
}


int main()
{
    int ch, n;
    node *Head;
    if(start == NULL)
		{
			printf("\n Number of nodes you want to create: ");
			scanf("%d", &n);
			createlist(n);
			printf("\n List created..");
			delete_at_end();
}
	else
			printf("\n List is already created..");
	traverse();
}

assi 10: bullble sort
#include <stdio.h>

void bubbleSort(int arr[], int n) 
{
    int i,j,temp;
	for (i = 0; i < n - 1; i++) 
	{
        for (j = 0; j < n - i - 1; j++) 
		{
            if (arr[j] > arr[j + 1]) 
			{
                // Swap arr[j] and arr[j + 1]
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main() {
    int i,n,arr[4000];
	printf("Enter the size of the array:\n");
  	scanf("%d", &n);
  	printf("Enter the elements:\n");
  	for (i = 0; i < n; i++) 
	  {
	    scanf("%d", &arr[i]);
	  } 

    printf("Unsorted array: ");
    for (i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    bubbleSort(arr, n);

    printf("Sorted array: ");
    for (i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

return 0;
}

assinment11: selection sort
#include <stdio.h>

// SMALLEST function to find the position of the smallest element in the array from index K to N.
int smallest(int arr[], int k, int n) {
    int small,pos,j;
	small = arr[k];
    pos = k;

    for (j = k + 1; j < n; j++) {
        if (small > arr[j]) {
            small = arr[j];
            pos = j;
        }
    }

    return pos;
}

// SELECTION SORT function to sort the array using the SMALLEST function.
void selectionSort(int arr[], int n) {
    int k,temp,pos;
	for (k = 0; k < n; k++) {
        pos = smallest(arr, k, n); // Find the position of the smallest element
        // Swap the smallest element with the current position (k)
        temp = arr[k];
        arr[k] = arr[pos];
        arr[pos] = temp;
    }
}

int main() 
{
    int n,i,arr[2000];	 
    printf("Enter the size of the array:\n");
  	scanf("%d", &n);
  	printf("Enter the elements:\n");
  	for (i = 0; i < n; i++) 
	  {
	    scanf("%d", &arr[i]);
	  } 
    printf("Unsorted array: ");
    for (i = 0; i < n; i++) 
	{
        printf("%d ", arr[i]);
    }
    printf("\n");
    selectionSort(arr, n);
    printf("Sorted array: ");
    for (i = 0; i < n; i++) 
	{
        printf("%d ", arr[i]);
    }
    printf("\n");
return 0;
}




